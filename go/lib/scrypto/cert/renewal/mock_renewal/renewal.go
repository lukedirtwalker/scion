// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/scionproto/scion/go/lib/scrypto/cert/renewal (interfaces: ValidationStore)

// Package mock_renewal is a generated GoMock package.
package mock_renewal

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	addr "github.com/scionproto/scion/go/lib/addr"
	keyconf "github.com/scionproto/scion/go/lib/keyconf"
	scrypto "github.com/scionproto/scion/go/lib/scrypto"
	reflect "reflect"
)

// MockValidationStore is a mock of ValidationStore interface
type MockValidationStore struct {
	ctrl     *gomock.Controller
	recorder *MockValidationStoreMockRecorder
}

// MockValidationStoreMockRecorder is the mock recorder for MockValidationStore
type MockValidationStoreMockRecorder struct {
	mock *MockValidationStore
}

// NewMockValidationStore creates a new mock instance
func NewMockValidationStore(ctrl *gomock.Controller) *MockValidationStore {
	mock := &MockValidationStore{ctrl: ctrl}
	mock.recorder = &MockValidationStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockValidationStore) EXPECT() *MockValidationStoreMockRecorder {
	return m.recorder
}

// ActiveSignKey mocks base method
func (m *MockValidationStore) ActiveSignKey(arg0 context.Context, arg1 keyconf.ID) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActiveSignKey", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActiveSignKey indicates an expected call of ActiveSignKey
func (mr *MockValidationStoreMockRecorder) ActiveSignKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActiveSignKey", reflect.TypeOf((*MockValidationStore)(nil).ActiveSignKey), arg0, arg1)
}

// IsCustomer mocks base method
func (m *MockValidationStore) IsCustomer(arg0 context.Context, arg1 addr.IA) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCustomer", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsCustomer indicates an expected call of IsCustomer
func (mr *MockValidationStoreMockRecorder) IsCustomer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCustomer", reflect.TypeOf((*MockValidationStore)(nil).IsCustomer), arg0, arg1)
}

// LatestChainVersion mocks base method
func (m *MockValidationStore) LatestChainVersion(arg0 context.Context, arg1 addr.IA) (scrypto.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LatestChainVersion", arg0, arg1)
	ret0, _ := ret[0].(scrypto.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LatestChainVersion indicates an expected call of LatestChainVersion
func (mr *MockValidationStoreMockRecorder) LatestChainVersion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LatestChainVersion", reflect.TypeOf((*MockValidationStore)(nil).LatestChainVersion), arg0, arg1)
}
